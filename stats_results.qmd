---
title: "Statistical Analysis and Results"
format: 
  docx:
    toc: false
    number-sections: true
    highlight-style: github
    prefer-html: true
bibliography: references.bib
csl: apa.csl
---

```{r} 
#| message: false
#| warning: false
#| echo: false
#| include: false


knitr::opts_chunk$set(echo = TRUE, fig.align="center")
options(knitr.kable.NA = '')

library(tidyverse)
library(modelbased)
library(kableExtra)
library(ggtext)
library(patchwork)

```

# Statistical Analysis

The present analysis was not pre-registered as we had no a priori hypotheses and thus was considered exploratory. Inferential statistics were treated as highly unstable local descriptions of the relations between model assumptions and data in order to acknowledge the inherent uncertainty in drawing generalised inferences from single and small samples [@amrheinInferentialStatisticsDescriptive2019]. For all analyses we opted to avoid dichotomising the existence of effects and therefore did not employ traditional null hypothesis significance testing on parameter estimates [@amrheinScientistsRiseStatistical2019; @mcshaneAbandonStatisticalSignificance2019]. Instead, we opted to take an estimation-based approach [@cummingNewStatisticsWhy2014]. For all analyses model parameter estimates and their precision (i.e., 95% confidence intervals [CI]), along with conclusions based upon them, were interpreted continuously and probabilistically, considering data quality, plausibility of effect, and previous literature, all within the context of each model. We focused primarily on qualitative examination of our results based on visualization of the data and models for fixed effects. All analysis was performed in R (version 4.3.3, The R Foundation for Statistical Computing, 2022) and all data and code is presented in the supplementary materials ([https://osf.io/ugbtd/](https://osf.io/ugbtd/)).All data visualisations were made using `ggplot2` [@wickhamGgplot2CreateElegant2022], `ggeffects` [@ludeckeGgeffectsCreateTidy2024] and the `patchwork` [@pedersenPatchworkComposerPlots2022] packages. The aim of our analysis was to explore to explore the effects of both low and high BFR conditions upon physiological and perceptual parameters during the warm-up, and on performance outcomes as a result of the warm-up. Linear mixed effects models were used with Restricted Maximal Likelihood estimation using the `lme4` package [@batesLme4LinearMixedEffects2023]. Given the variety of outcomes examined, the timing of their data collection (e.g., pre- to post-warm-up, during warm-up, or post-warm-up only), and the number of measurements taken (e.g., single measures or multiple measures) we describe all of the specific model structures, in addition to model checks and diagnostics using the `performance` package [@strengejackePerformanceAssessmentRegression2024a], in the online supplementary materials (download and view html file from: [https://osf.io/4jtzu](https://osf.io/4jtzu)). Where possible we utilised maximal random effects structures for the data (i.e., as long as there were sufficient degrees of freedom, convergence could be achieved, and singularity was avoided).

# Results
```{r} 
#| message: false
#| warning: false
#| echo: false

targets::tar_load(c(
  sit_reach_model,
  lactate_model,
  borg_rpe_model,
  heart_rate_model,
  cmj_model,
  sprint_model,
  imtp_model,
  sit_reach_model_tidy,
  lactate_model_tidy,
  borg_rpe_model_tidy,
  heart_rate_model_tidy,
  cmj_model_tidy,
  sprint_model_tidy,
  imtp_model_tidy
))

sit_reach_model_tidy <- sit_reach_model_tidy |>
  mutate_if(is.numeric, round, 2)

lactate_model_tidy <- lactate_model_tidy |>
  mutate_at(c("estimate", "conf.low", "conf.high"), exp) |> 
  mutate_if(is.numeric, round, 2)

borg_rpe_model_tidy <- borg_rpe_model_tidy |>
  mutate_if(is.numeric, round, 2)

heart_rate_model_tidy <- heart_rate_model_tidy |>
  mutate_if(is.numeric, round, 2)

cmj_model_tidy <- cmj_model_tidy |>
  mutate_if(is.numeric, round, 2)

sprint_model_tidy <- sprint_model_tidy |>
  mutate_if(is.numeric, round, 4)

imtp_model_tidy <- imtp_model_tidy |>
  mutate_if(is.numeric, round, 2)

```

Full model summaries including all fixed effect parameter estimates, their confidence intervals, and p values, in addition to all random effect estimates and their correlations, are provided in the online supplementary materials (download and view html file from: [https://osf.io/3bdwt](https://osf.io/3bdwt)). Here we focus on presenting the key results for the effects of condition, or condition:time interaction effects (i.e., where timepoint was pre- to post-warm-up or multiple measures where taken during warm-up such as heart rate each minute).

## Effects of Warm-up on Physiological and Perceptual Outcomes

```{r}
#| message: false
#| warning: false
#| echo: false
#| label: fig-warmup 
#| fig-width: 10
#| fig-height: 10
#| fig-cap: Individual participant and measurement level data (thin lines) with model predicted values and 95% confidence intervals (thick lines and bands OR points and error bars). Panel (A) shows the results for heart rate, panel (B) shows the results for blood lactate, and panel (C) shows the results for rating of perceived exertion.

targets::tar_load(heart_rate_plot)
targets::tar_load(lactate_plot)
targets::tar_load(borg_rpe_plot)

((heart_rate_plot + guides(color = "none")) / (lactate_plot  | borg_rpe_plot))  +
    plot_layout(guides = "collect")  +
    plot_annotation(
      tag_levels = "A",
      title = "Effects of Warmup on Physiological and Perceptual Outcomes"
    ) & 
    theme(legend.position = "bottom")
```

### Heart Rate
```{r}
#| message: false
#| warning: false
#| echo: false

heart_rate_slopes <- estimate_slopes(heart_rate_model, trend = "minute", at = "condition") |>
  mutate_if(is.numeric, round, 2)
```
Heart rate increased over time (i.e., each minute) in the control condition (slope = `r heart_rate_slopes$Coefficient[1]` [95% CI: `r heart_rate_slopes$CI_low[1]`, `r heart_rate_slopes$CI_high[1]`] beats.minute$^{-1}$), low BFR condition (slope = `r heart_rate_slopes$Coefficient[2]` [95% CI: `r heart_rate_slopes$CI_low[2]`, `r heart_rate_slopes$CI_high[2]`] beats.minute$^{-1}$) and the high BFR condition (slope = `r heart_rate_slopes$Coefficient[3]` [95% CI: `r heart_rate_slopes$CI_low[3]`, `r heart_rate_slopes$CI_high[3]`] beats.minute$^{-1}$). However, despite heart rate appearing greater at the beginning of the warm-up for the high BFR condition it was similar between conditions by the end of the warm-up such that (@tbl-heartcontr shows the between condition contrasts at three minute intervals). Heart rate results are seen in figure (@fig-warmup (A)).

```{r}
#| message: false
#| warning: false
#| echo: false
#| label: tbl-heartcontr
#| tbl-cap-location: "top"
#| tbl-cap: Between condition contrasts across time for heart rate.

heart_rate_contr <- estimate_contrasts(heart_rate_model, at = c("condition", "minute=c(0,3,6,9,12,15,18)")) |>
  arrange(minute) |>
  select(c(1:2,4:6)) |>
  mutate_if(is.numeric, round, 2) |>
  mutate(
    Level1 = case_when(
    Level1 == "no" ~ "Control",
    Level1 == "low" ~ "Low BFR",
    Level1 == "high" ~ "High BFR"
  ),
  Level2 = case_when(
    Level2 == "no" ~ "Control",
    Level2 == "low" ~ "Low BFR",
    Level2 == "high" ~ "High BFR"
  )
  )

knitr::kable(
  heart_rate_contr,
  align = "c",
  col.names = c("Condition 1",
                "Condition 2",
                "Contrast",
                "Lower 95\\% CI",
                "Upper 95\\% CI"
                ),
  escape = FALSE, 
  booktabs = TRUE
 
) |>
  footnote(general = c("CI = confidence interval; BFR = blood flow restriction")
           ) |>
  kable_classic(full_width = FALSE) |>
  pack_rows("Baseline", 1,3) |>
  pack_rows("3 Minutes", 4,6) |>
  pack_rows("6 Minutes", 7,9) |>
  pack_rows("9 Minutes", 10,12) |>
  pack_rows("12 Minutes", 13,15) |>
  pack_rows("15 Minutes", 16,18) |>
  pack_rows("18 Minutes", 19,21) |>
  kableExtra::kable_styling()

```

### Blood Lactate
```{r}
#| message: false
#| warning: false
#| echo: false


lactate_slopes <- estimate_slopes(lactate_model, trend = "timepoint", at = "condition")  |>
  mutate_if(is.numeric, round, 2)

```

Blood lactate was fit using log transformed values and thus values reported here are for the log transformations. Blood lactate results are seen in figure (@fig-warmup (B)) are however on the back transformed raw scale. Blood lactate increased from pre- to post-warm-up in the control condition (slope = `r lactate_slopes$Coefficient[1]` [95% CI: `r lactate_slopes$CI_low[1]`, `r lactate_slopes$CI_high[1]`] log(mmol.L$^{-1}$)), low BFR condition (slope = `r lactate_slopes$Coefficient[2]` [95% CI: `r lactate_slopes$CI_low[2]`, `r lactate_slopes$CI_high[2]`] log(mmol.L$^{-1}$)) and the high BFR condition (slope = `r lactate_slopes$Coefficient[3]` [95% CI: `r lactate_slopes$CI_low[3]`, `r lactate_slopes$CI_high[3]`] log(mmol.L$^{-1}$)). However, there was no clear differences between conditions post-warm-up though a tendency for the high BFR condition to result in greater blood lactate levels (@tbl-lactatecontr shows the between condition contrasts at both timepoints).

```{r}
#| message: false
#| warning: false
#| echo: false
#| label: tbl-lactatecontr
#| tbl-cap-location: "top"
#| tbl-cap: Between condition contrasts at each timepoint for log blood lactate.

lactate_contr <- estimate_contrasts(lactate_model, at = c("condition", "timepoint=c(0,1)")) |>
  arrange(timepoint) |>
  select(c(1:2,4:6)) |>
  mutate(
    Level1 = case_when(
    Level1 == "no" ~ "Control",
    Level1 == "low" ~ "Low BFR",
    Level1 == "high" ~ "High BFR"
  ),
  Level2 = case_when(
    Level2 == "no" ~ "Control",
    Level2 == "low" ~ "Low BFR",
    Level2 == "high" ~ "High BFR"
  )
  ) |>
    mutate_if(is.numeric, round, 2)


knitr::kable(
  lactate_contr,
  align = "c",
  col.names = c("Condition 1",
                "Condition 2",
                "Contrast",
                "Lower 95\\% CI",
                "Upper 95\\% CI"
                ),
  escape = FALSE, 
  booktabs = TRUE
 
) |>
  footnote(general = c("CI = confidence interval; BFR = blood flow restriction")
           ) |>
  kable_classic(full_width = FALSE) |>
  pack_rows("Pre-warm-up", 1,3) |>
  pack_rows("Post-warm-up", 4,6) |>
  kableExtra::kable_styling()

```

### Rating of Perceived Exertion
```{r}
#| message: false
#| warning: false
#| echo: false

borg_rpe_means <- estimate_means(borg_rpe_model) |>
  mutate_if(is.numeric, round, 2)

borg_rpe_contr <- estimate_contrasts(borg_rpe_model) |>
  mutate_if(is.numeric, round, 2)

```
Rating of perceived exertion under the control condition was `r borg_rpe_means$Mean[1]` [95% CI: `r borg_rpe_means$CI_low[1]`, `r borg_rpe_means$CI_high[1]`] points, under the low BFR condition it was `r borg_rpe_means$Mean[2]` [95% CI: `r borg_rpe_means$CI_low[2]`, `r borg_rpe_means$CI_high[2]`] points, and under the high BFR condition it was `r borg_rpe_means$Mean[3]` [95% CI: `r borg_rpe_means$CI_low[3]`, `r borg_rpe_means$CI_high[3]`] points. Compared with the control condition the low BFR condition resulted in a `r borg_rpe_contr$Difference[3]*-1` [95% CI: `r borg_rpe_contr$CI_low[3]*-1`, `r borg_rpe_contr$CI_high[3]*-1`] points greater rating of perceived exertion, and the high BFR condition resulted in a `r borg_rpe_contr$Difference[2]*-1` [95% CI: `r borg_rpe_contr$CI_low[2]*-1`, `r borg_rpe_contr$CI_high[2]*-1`] points greater rating of perceived exertion. The contrast between the low BFR and high BFR conditions was `r borg_rpe_contr$Difference[2]*-1` [95% CI: `r borg_rpe_contr$CI_low[2]*-1`, `r borg_rpe_contr$CI_high[2]*-1`] greater for the high BFR condition. Rating of perceived exertion results are seen in figure (@fig-warmup (B)).

## Effects of Warm-up on Performance Outcomes
```{r}
#| message: false
#| warning: false
#| echo: false
#| label: fig-perform
#| fig-width: 10
#| fig-height: 10
#| fig-cap: Individual participant and measurement level data (thin lines) with model predicted values and 95% confidence intervals (thick lines and bands OR points and error bars). Panel (A) shows the results for sit and reach, panel (B) shows the results for countermovement jump, panel (C) shows the results for sprint time, and panel (D) shows the results for isometric mid thigh pull.

targets::tar_load(sit_reach_plot)
targets::tar_load(cmj_plot)
targets::tar_load(sprint_plot)
targets::tar_load(imtp_plot)


((sit_reach_plot + guides(color = "none")) + cmj_plot + sprint_plot + imtp_plot) +  
    plot_layout(guides = "collect")  +
    plot_annotation(
      tag_levels = "A",
      title = "Effects of Warmup on Performance Outcomes"
    ) & 
    theme(legend.position = "bottom")
```

### Sit and Reach
```{r}
#| message: false
#| warning: false
#| echo: false


sit_reach_slopes <- estimate_slopes(sit_reach_model, trend = "timepoint", at = "condition")  |>
  mutate_if(is.numeric, round, 2)

```

Sit and reach increased from pre- to post-warm-up in the control condition (slope = `r sit_reach_slopes$Coefficient[1]` [95% CI: `r sit_reach_slopes$CI_low[1]`, `r sit_reach_slopes$CI_high[1]`] cm), low BFR condition (slope = `r sit_reach_slopes$Coefficient[2]` [95% CI: `r sit_reach_slopes$CI_low[2]`, `r sit_reach_slopes$CI_high[2]`] cm) and the high BFR condition (slope = `r sit_reach_slopes$Coefficient[3]` [95% CI: `r sit_reach_slopes$CI_low[3]`, `r sit_reach_slopes$CI_high[3]`] cm). However, there was no clear differences between conditions post-warm-up (@tbl-sitreachcontr shows the between condition contrasts at both timepoints). Sit and reach results are seen in figure (@fig-perform (A)).

```{r}
#| message: false
#| warning: false
#| echo: false
#| label: tbl-sitreachcontr
#| tbl-cap-location: "top"
#| tbl-cap: Between condition contrasts at each timepoint for sit and reach.

sit_reach_contr <- estimate_contrasts(sit_reach_model, at = c("condition", "timepoint=c(0,1)")) |>
  arrange(timepoint) |>
  select(c(1:2,4:6)) |>
  mutate(
    Level1 = case_when(
    Level1 == "no" ~ "Control",
    Level1 == "low" ~ "Low BFR",
    Level1 == "high" ~ "High BFR"
  ),
  Level2 = case_when(
    Level2 == "no" ~ "Control",
    Level2 == "low" ~ "Low BFR",
    Level2 == "high" ~ "High BFR"
  )
  ) |>
    mutate_if(is.numeric, round, 2)


knitr::kable(
  sit_reach_contr,
  align = "c",
  col.names = c("Condition 1",
                "Condition 2",
                "Contrast",
                "Lower 95\\% CI",
                "Upper 95\\% CI"
                ),
  escape = FALSE, 
  booktabs = TRUE
 
) |>
  footnote(general = c("CI = confidence interval; BFR = blood flow restriction")
           ) |>
  kable_classic(full_width = FALSE) |>
  pack_rows("Pre-warm-up", 1,3) |>
  pack_rows("Post-warm-up", 4,6) |>
  kableExtra::kable_styling()

```


### Countermovement Jump
```{r}
#| message: false
#| warning: false
#| echo: false

cmj_means <- estimate_means(cmj_model) |>
  mutate_if(is.numeric, round, 2)

cmj_contr <- estimate_contrasts(cmj_model) |>
  mutate_if(is.numeric, round, 2)

```
Countermovement jump performance under the control condition was `r cmj_means$Mean[1]` [95% CI: `r cmj_means$CI_low[1]`, `r cmj_means$CI_high[1]`] points, under the low BFR condition it was `r cmj_means$Mean[2]` [95% CI: `r cmj_means$CI_low[2]`, `r cmj_means$CI_high[2]`] points, and under the high BFR condition it was `r cmj_means$Mean[3]` [95% CI: `r cmj_means$CI_low[3]`, `r cmj_means$CI_high[3]`] points. Compared with the control condition the low BFR condition resulted in a `r cmj_contr$Difference[3]*-1` [95% CI: `r cmj_contr$CI_low[3]*-1`, `r cmj_contr$CI_high[3]*-1`] cm lower countermovement jump height, and the high BFR condition resulted in a `r cmj_contr$Difference[2]*-1` [95% CI: `r cmj_contr$CI_low[2]*-1`, `r cmj_contr$CI_high[2]*-1`] cm lower countermovement jump height. The contrast between the low BFR and high BFR conditions was `r cmj_contr$Difference[2]*-1` [95% CI: `r cmj_contr$CI_low[2]*-1`, `r cmj_contr$CI_high[2]*-1`] greater for the high BFR condition. Countermovement jump results are seen in figure (@fig-perform (B)).

### Sprints
```{r}
#| message: false
#| warning: false
#| echo: false

sprint_slopes <- estimate_slopes(sprint_model, trend = "distance", at = "condition") |>
  mutate_if(is.numeric, round, 2)
```
The slope for distance in the sprints was essentially the same for all conditions suggesting no impact upon acceleration over 10 to 20 to 30 meters (`r sprint_slopes$Coefficient[1]` [95% CI: `r sprint_slopes$CI_low[1]`, `r sprint_slopes$CI_high[1]`] seconds per meter). Differences between condition at the three distances were also minimal (@tbl-sprintcontr shows the between condition contrasts at each distance) There was essentially no clear effect of either condition compared to the control condition for sprint time, nor any interaction with sprint distance. Sprint time results are seen in figure (@fig-perform (C)).

```{r}
#| message: false
#| warning: false
#| echo: false
#| label: tbl-sprintcontr
#| tbl-cap-location: "top"
#| tbl-cap: Between condition contrasts over distance for sprint time.

sprint_contr <- estimate_contrasts(sprint_model, at = c("condition", "distance=c(10,20,30)")) |>
  arrange(distance) |>
  select(c(1:2,4:6)) |>
  mutate_if(is.numeric, round, 2) |>
  mutate(
    Level1 = case_when(
    Level1 == "no" ~ "Control",
    Level1 == "low" ~ "Low BFR",
    Level1 == "high" ~ "High BFR"
  ),
  Level2 = case_when(
    Level2 == "no" ~ "Control",
    Level2 == "low" ~ "Low BFR",
    Level2 == "high" ~ "High BFR"
  )
  )

knitr::kable(
  sprint_contr,
  align = "c",
  col.names = c("Condition 1",
                "Condition 2",
                "Contrast",
                "Lower 95\\% CI",
                "Upper 95\\% CI"
                ),
  escape = FALSE, 
  booktabs = TRUE
 
) |>
  footnote(general = c("CI = confidence interval; BFR = blood flow restriction")
           ) |>
  kable_classic(full_width = FALSE) |>
  pack_rows("10 meters", 1,3) |>
  pack_rows("20 meters", 4,6) |>
  pack_rows("30 meters", 7,9) |>
  kableExtra::kable_styling()
```

### Isometric Mid Thigh Pull
```{r}
#| message: false
#| warning: false
#| echo: false

imtp_means <- estimate_means(imtp_model) |>
  mutate_if(is.numeric, round, 2)

imtp_contr <- estimate_contrasts(imtp_model) |>
  mutate_if(is.numeric, round, 2)

```
Isometric mid thigh pull performance under the control condition was `r imtp_means$Mean[1]` [95% CI: `r imtp_means$CI_low[1]`, `r imtp_means$CI_high[1]`] N, under the low BFR condition it was `r imtp_means$Mean[2]` [95% CI: `r imtp_means$CI_low[2]`, `r imtp_means$CI_high[2]`] N, and under the high BFR condition it was `r imtp_means$Mean[3]` [95% CI: `r imtp_means$CI_low[3]`, `r imtp_means$CI_high[3]`] N. There were neglible differences between conditions. Compared with the control condition the low BFR condition resulted in a `r imtp_contr$Difference[3]*-1` [95% CI: `r imtp_contr$CI_low[3]*-1`, `r imtp_contr$CI_high[3]*-1`] N greater isometric mid thigh pull, and the high BFR condition resulted in a `r imtp_contr$Difference[2]*-1` [95% CI: `r imtp_contr$CI_low[2]*-1`, `r imtp_contr$CI_high[2]*-1`] N lower isometric mid thigh pull. The contrast between the low BFR and high BFR conditions was `r imtp_contr$Difference[2]*-1` [95% CI: `r imtp_contr$CI_low[2]*-1`, `r imtp_contr$CI_high[2]*-1`] greater for the high BFR condition. Isometric mid thigh pull results are seen in figure (@fig-perform (D)).

# References
